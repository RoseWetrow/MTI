import asyncio
import asyncpg
import os
import sys
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))  # –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞
from dotenv import load_dotenv
from updates.dates import read_last_date_from_file
from app.keyboards import start_markup, about_markup, clear_markup
from bot.state import messageDict
from query_routes_logic import routes
from query_stops_logic import stops, multi_outstops


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(".env")
TG_TOKEN = os.environ.get("TG_TOKEN")
DB_HOST = os.environ.get("DB_HOST")
DB_USER = os.environ.get("DB_USER")
DB_PASS = os.environ.get("DB_PASS")
DB_NAME = os.environ.get("DB_NAME")
DB_PORT = os.environ.get("DB_PORT")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TG_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

try:
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL
    async def create_pool():
        return await asyncpg.create_pool(user=DB_USER, password=DB_PASS, database=DB_NAME, host=DB_HOST, port=DB_PORT)


    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    @dp.message(CommandStart())
    async def start_handler(message: Message):
        relevance_date = read_last_date_from_file()
        await message.answer(f"<b>Moscow Transport Information</b> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å, {message.from_user.username}!\n\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–ª–∏ –º–∞—Ä—à—Ä—É—Ç –ø–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ.\n"
                            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/903 ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞\n"
                            "//–ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç ‚Äî —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ã, –ø—Ä–æ—Ö–æ–¥—è—â–∏–µ —á–µ—Ä–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫—É\n\n"
                            f"(–¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ {relevance_date})", reply_markup=start_markup())


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–û –±–æ—Ç–µ"
    @dp.callback_query(F.data == "about")
    async def about_callback(callback: CallbackQuery):
        await callback.message.edit_text(
            "‚ÑπÔ∏è <b>MTI (Moscow Transport Information Bot)</b> ‚Äî –±–æ—Ç, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—é–±–æ–º, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º –≤–∞—Å –º–∞—Ä—à—Ä—É—Ç–µ/–æ—Å—Ç–∞–Ω–æ–≤–∫–µ, –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
            "–ó–¥–µ—Å—å –ø–æ –Ω–æ–º–µ—Ä—É –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å:\n"
            "‚Ä¢ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞\n"
            "‚Ä¢ —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –ø–æ –ø—É—Ç–∏ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–µ (–∞–¥—Ä–µ—Å, —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)\n\n"
            "üìä –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –ø–æ—Ä—Ç–∞–ª–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ú–æ—Å–∫–≤—ã. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª–µ–µ 6,5 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –∑–∞–ø–∏—Å–µ–π –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è.\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, –ø–∏—à–∏—Ç–µ @RsdtUub",
            reply_markup=about_markup()
        )
        await callback.answer()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "loading" —É –∫–Ω–æ–ø–∫–∏


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞–∑–∞–¥"
    @dp.callback_query(F.data == "about_back")
    async def about_back_callback(callback: CallbackQuery):
        await callback.message.edit_text(
            f"<b>Moscow Transport Information</b> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å, {callback.from_user.username}!\n\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–ª–∏ –º–∞—Ä—à—Ä—É—Ç –ø–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ.\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/903 ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞\n"
            "//–ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç ‚Äî —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ã, –ø—Ä–æ—Ö–æ–¥—è—â–∏–µ —á–µ—Ä–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫—É",
            reply_markup=start_markup()
        )
        await callback.answer()


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    @dp.callback_query(F.data.startswith("route_"))
    async def route_callback(callback: CallbackQuery):
        print("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞!")
        # key = callback.data.replace("route_", "route ")
        key = callback.data
        # print(key)
        # print(messageDict)
        if key in messageDict:
            await callback.message.answer(messageDict[key], reply_markup=clear_markup())

        await callback.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    @dp.callback_query(F.data.startswith("stop_"))
    async def route_callback(callback: CallbackQuery):
        print("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏!")
        key = callback.data
        print(f'key: {key}')
        print(f'messageDict: {messageDict}')
        print(f'stops_count: {stops_count}')
        
        if stops_count <= 4:
            if key in messageDict:
                await callback.message.answer(messageDict[key], reply_markup=clear_markup())
        elif stops_count > 4:
            if key in messageDict:
                pool = await create_pool()
                async with pool.acquire() as conn:
                    stop_info = await multi_outstops(conn, stop_name, key)
                    
                await callback.message.answer(stop_info, reply_markup=clear_markup())
                        
        await callback.answer()


    @dp.callback_query(F.data == "clear")
    async def clear_callback(callback: CallbackQuery):
        await callback.message.delete()
        await callback.answer() 


    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–∞—Ä—à—Ä—É—Ç/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞)
    @dp.message()
    async def main_handler(message: Message):
        text = message.text.strip()

        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
        if text.startswith("/") and not text.startswith("//"):
            route_short_name = text[1:].strip()

            pool = await create_pool()
            async with pool.acquire() as conn:
                
                route_long_name = await conn.fetch("SELECT route_long_name FROM routes WHERE route_short_name ILIKE $1;", f'{route_short_name}') # –ü–æ–ª—É—á–∞–µ–º route_long_name –ø–æ route_short_name (–æ–¥–∏–Ω –∏–ª–∏ —Å–ø–∏—Å–æ–∫)
            
                if not route_long_name:
                    await message.answer(f"<b>–ü–æ –∑–∞–ø—Ä–æ—Å—É '{route_short_name}' –Ω–∏ –æ–¥–∏–Ω –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
                    return
                else:
                    await routes(route_short_name, route_long_name, conn, message)  # –ª–æ–≥–∏–∫–∞ routes() –Ω–∞—Ö–æ–¥–∏–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –º–∞—Ä—É—à—Ä—É—Ç–µ

        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        elif text.startswith("//"):
            global stops_count # (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
            global stop_name # (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
            stop_name = text[2:].rstrip()

            pool = await create_pool()
            async with pool.acquire() as conn:
                # stops_names = await conn.fetch("SELECT stop_name FROM stops WHERE stop_name ILIKE $1;", f'%{stop_name}%') # –Ω–∞—Ö–æ–¥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                stops_names_ids = await conn.fetch("SELECT stop_name, stop_id FROM stops WHERE stop_name ILIKE $1;", f'%{stop_name}%') # –Ω–∞—Ö–æ–¥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\
                stops_count = len(stops_names_ids)
                
                if not stops_names_ids:
                    await message.answer(f"<b>–ü–æ –∑–∞–ø—Ä–æ—Å—É '{stop_name}' –Ω–∏ –æ–¥–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
                    return
                else:
                    await stops(stops_count, stops_names_ids, stop_name, conn, message) # –ª–æ–≥–∏–∫–∞ stops() –Ω–∞—Ö–æ–¥–∏–º –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ –æ—Å—Ç–∞–Ω–≤–æ–∫–µ
            
        else:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π /–Ω–æ–º–µ—Ä_–º–∞—Ä—à—Ä—É—Ç–∞ –∏–ª–∏ //–Ω–∞–∑–≤–∞–Ω–∏–µ_–æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

except KeyboardInterrupt:
    print('Exit...')


async def main():
    await bot.delete_webhook(drop_pending_updates=True) # –û—á–∏—â–∞–µ–º pending updates –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    await dp.start_polling(bot) # –¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è

if __name__ == "__main__":
    asyncio.run(main())